library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
plot1 <- qplot(diamonds,y=price) +
ggtitle('Price')
plot2 <- qplot(diamonds,y=price) +
scale_y_log10()+
ggtitle('Price (log10)')
grid.arrange(plot1,plot2)
library(gridExtra)
grid.arrange(plot1,plot2)
plot1 <- qplot(diamonds,y=diamonds$price) +
ggtitle('Price')
qplot(diamonds,y=diamonds$price) +
ggtitle('Price')
qplot(diamonds,x=price) +
ggtitle('Price')
qplot(data = diamonds,x=price) +
ggtitle('Price')
plot1 <- qplot(data = diamonds,x=price) +
ggtitle('Price')
plot2 <- qplot(data = diamonds,x=price) +
scale_y_log10()+
ggtitle('Price (log10)')
grid.arrange(plot1,plot2)
grid.arrange(plot1,plot2,ncol =1)
grid.arrange(plot1,plot2,ncol =2)
data_price = subset(diamonds,!is.na(diamonds$price))
plot1 <- qplot(data = data_price,x=price) +
ggtitle('Price')
plot2 <- qplot(data = data_price,x=price) +
scale_y_log10()+
ggtitle('Price (log10)')
grid.arrange(plot1,plot2,ncol =2)
summary(diamonds$price)
25
25
plot1 <- qplot(data = data_price,x=price,binwidth =25,color = 'black', fill = '#F79420') +
ggtitle('Price')
plot2 <- qplot(data = data_price,x=price,binwidth =25, color = 'black', fill = '#099DD9') +
scale_y_log10()+
ggtitle('Price (log10)')
grid.arrange(plot1,plot2,ncol =2)
plot1 <- qplot(data = data_price,x=price,binwidth =25,color = I('black'), fill = I('#F79420')) +
ggtitle('Price')
plot2 <- qplot(data = data_price,x=price,binwidth =25, color = I('black'), fill = I('#099DD9')) +
scale_y_log10()+
ggtitle('Price (log10)')
plot1 <- qplot(data = data_price,x=price,binwidth =25,color = I('black'), fill = I('#F79420') )+
ggtitle('Price')
plot2 <- qplot(data = data_price,x=price,binwidth =25, color = I('black'), fill = I('#099DD9') )+
scale_y_log10()+
ggtitle('Price (log10)')
grid.arrange(plot1,plot2,ncol =2)
plot1 <- qplot(data = data_price,x=price,binwidth =25,color = I('#F79420') )+
ggtitle('Price')
plot2 <- qplot(data = data_price,x=price,binwidth =25, color = I('#099DD9') )+
scale_y_log10()+
ggtitle('Price (log10)')
grid.arrange(plot1,plot2,ncol =2)
plot1 <- qplot(data = data_price,x=price,binwidth =25,color = I('#F79420') )+
ggtitle('Price')
plot2 <- qplot(data = data_price,x=price,binwidth =25, color = I('#099DD9') )+
scale_x_log10()+
ggtitle('Price (log10)')
grid.arrange(plot1,plot2,ncol =2)
summary(log10(diamonds$price))
plot2 <- qplot(data = data_price,x=price,binwidth =0.01, color = I('#099DD9') )+
scale_x_log10()+
ggtitle('Price (log10)')
grid.arrange(plot1,plot2,ncol =2)
qplot(data = data_price,x=price,binwidth =0.01, color = I('#099DD9') )+
scale_x_log10(lim = c(0,20000), breaks = seq(0,5000,1000))
ggtitle('Price (log10)')
qplot(data = data_price,x=price,binwidth =0.01, color = I('#099DD9') )+
scale_x_log10()
ggtitle('Price (log10)')
qplot(data = data_price,x=price,binwidth =0.01, color = I('#099DD9') )+
scale_x_log10( breaks = seq(0,5000,1000))
qplot(data = data_price,x=price,binwidth =0.01, color = I('#099DD9') )+
scale_x_log10( breaks = seq(0,20000,1000))
qplot(data = data_price,x=carat,y=price,color = I('#099DD9') )+
scale_y_continuous( trans = log10_trans())
ggtitle('Price (log10) by carat')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(color = "#099DD9") +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamons$carat),decreasing = T))
head(sort(table(diamonds$carat),decreasing = T))
head(sort(table(diamonds$price),decreasing = T))
table(diamonds$price)
head(table(diamonds$price))
heads(table(diamonds$price))
nrow(table(diamonds$price))
nrow(sort(table(diamonds$price),decreasing = T))
head(diamonds)
head(sort(table(diamonds$carat),decreasing = T))
sort(table(diamonds$carat),decreasing = T)
head(sort(table(diamonds$carat),decreasing = T))
head(sort(table(diamonds$price),decreasing = T))
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha = 1/2 ,size = 3/4) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2 ,size = 3/4, position ='jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
plot1 <- ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
plot2 <- ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2 ,size = 3/4, position ='jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
plot1 <- ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
plot2 <- ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2 ,size = 3/4, position ='jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
grid.arrange(plot1,plot2,ncol =2)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds,color = factor(clarity)) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price,color = factor(clarity)), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(RColorBrewer)
ggplot(aes(x = carat, y = price,color = factor(clarity)), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
install.packages('RColorBrewer')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Color, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'color',
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
?diamonds
install.package('bitops')
install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
