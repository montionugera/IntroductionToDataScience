 Now that we have a better understanding of our variables, and the overall demand for diamonds, let's replot the data. This time we'll put price on a log10 scale, and here's what it looks like. This plot looks better than before. On the log scale, the prices look less dispersed at the high end of Carat size and price, but actually we can do better. Let's try using the cube root of Carat in light of our speculation about flaws being exponentially more likely in diamonds with more volume. Remember, volume is on a cubic scale. First, we need a function to transform the Carat variable. If you'd like to learn more about writing your own functions in R, check out the links in the instructor notes. This may seem like a lot of code, but really, there's only one new piece here. It's this cube root trans-function. It's a function that takes the cube root of any input variable, and it also has an inverse function to undo that operation, which we need to display the plot correctly. Then when we get to our actual ggplot command. What we'll do is we'll use the scale_x_continuous argument to transform the x axis with this cube root transformation function. Keep in mind we're also transforming the y axis with this log10 transformation that we discussed previously. And, let's see what this plot looks like. Taking a look at the plot, we can actually see that with these transformations that we used to get our data on this nice scale. Things look almost linear. We can now move forward and see about modelling our data using just a linear model.
